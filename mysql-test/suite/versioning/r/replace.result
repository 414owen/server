create or replace table t(
id int,
KEY_TYPE(id),
x int,
row_start SYS_DATATYPE as row start invisible,
row_end SYS_DATATYPE as row end invisible,
period for system_time(row_start, row_end)
) with system versioning;
insert t values (1, 2);
replace t values (1, 3);
select *, current_row(row_end) as current from t for system_time all order by x;
id	x	current
1	2	0
1	3	1
drop table t;
create table t (
id int unique,
x int,
row_start SYS_DATATYPE as row start invisible,
row_end SYS_DATATYPE as row end invisible,
period for system_time (row_start, row_end)
) with system versioning;
insert t values (1, 2);
replace t values (1, 3);
select *, current_row(row_end) as current from t for system_time all order by x;
id	x	current
1	2	0
1	3	1
drop table t;
# MDEV-15645 Assertion `table->insert_values' failed in write_record upon REPLACE into a view with underlying versioned table
create or replace table t1 (a int, b int, primary key (a), unique(b)) with system versioning;
insert into t1 values (1,1);
create or replace table t2 (c int);
create or replace view v as select t1.* from t1 join t2;
replace into v (a, b) select a, b from t1;
drop view v;
drop tables t1, t2;
CREATE TABLE t1 (
pk INT AUTO_INCREMENT,
f INT,
row_start SYS_DATATYPE AS ROW START INVISIBLE,
row_end SYS_DATATYPE AS ROW END INVISIBLE,
PRIMARY KEY(pk),
UNIQUE(f),
PERIOD FOR SYSTEM_TIME(row_start, row_end)
) WITH SYSTEM VERSIONING;
INSERT INTO t1 () VALUES (),(),(),(),(),();
UPDATE IGNORE t1 SET f = 1;
REPLACE t1 SELECT * FROM t1;
DROP TABLE t1;
# MDEV-22540 ER_DUP_ENTRY upon REPLACE or Assertion failed
set timestamp=1589245268.41934;
create table t1 (a int primary key) with system versioning;
insert into t1 values (1),(2);
connect  con1,localhost,root,,test;
set timestamp=1589245268.52093;
replace into t1 values (1),(2);
connection default;
replace into t1 values (1),(2);
connection con1;
replace into t1 values (1),(2);
ERROR 23000: Duplicate entry '1' for key 'PRIMARY'
connection default;
set timestamp=default;
drop table t1;
#
# MDEV-15990: REPLACE on a precise-versioned table
# returns duplicate key error (ER_DUP_ENTRY)
create or replace table t(
id int,
KEY_TYPE(id),
x int,
row_start SYS_DATATYPE as row start invisible,
row_end SYS_DATATYPE as row end invisible,
period for system_time(row_start, row_end)
) with system versioning;
replace t values (1, 3), (1, 30), (1, 300);
create temporary table log(id int key auto_increment, s char(30));
create trigger tr1del before delete on t
for each row insert log(s) select 'DEL BEFORE' union
select concat(id, ' ', x, ' ',
if(row_start = (select VERS_CURRENT_VALUE),
"CURRENT", "OTHER"),
' ', check_row(row_start, row_end))
from t for system_time all;
create trigger tr2del after delete on t
for each row insert log(s) select 'DEL AFTER' union
select concat(id, ' ', x, ' ',
if(row_start = (select VERS_CURRENT_VALUE),
"CURRENT", "OTHER"),
' ', check_row(row_start, row_end))
from t for system_time all;
replace t values (1, 4), (1, 40), (1, 400);
select *, check_row(row_start, row_end), row_start != 0 as start_nonzero
from t for system_time all order by x, row_end;
id	x	check_row(row_start, row_end)	start_nonzero
1	300	HISTORICAL ROW	1
1	400	CURRENT ROW	1
select s from log order by id;
s
DEL BEFORE
1 300 OTHER CURRENT ROW
DEL AFTER
1 300 OTHER HISTORICAL ROW
DEL BEFORE
1 300 OTHER HISTORICAL ROW
1 4 CURRENT CURRENT ROW
DEL AFTER
1 300 OTHER HISTORICAL ROW
DEL BEFORE
1 300 OTHER HISTORICAL ROW
1 40 CURRENT CURRENT ROW
DEL AFTER
1 300 OTHER HISTORICAL ROW
# ensure that row_start is not duplicated
select count(row_start) as empty from t for system_time all
group by row_start having count(row_start) > 1;
empty
drop table t;
# Replace on unversioned field should create history record
create table t(
id int primary key,
x int without system versioning,
row_start SYS_DATATYPE as row start invisible,
row_end SYS_DATATYPE as row end invisible,
period for system_time(row_start, row_end)
) with system versioning;
insert t values (1, 2);
replace t values (1, 3);
select *, check_row(row_start, row_end), row_start != 0 as start_nonzero
from t for system_time all order by x;
id	x	check_row(row_start, row_end)	start_nonzero
1	2	HISTORICAL ROW	1
1	3	CURRENT ROW	1
# ensure that row_start is not duplicated
select count(row_start) as empty from t for system_time all
group by row_start having count(row_start) > 1;
empty
drop table t;
drop table log;
