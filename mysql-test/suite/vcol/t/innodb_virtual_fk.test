source include/have_innodb.inc;
source include/have_sequence.inc;

set default_storage_engine=innodb;

#
# MDEV-13708 Crash with indexed virtual columns and FK cascading deletes
#

create table t1 (id int primary key, id2 int as (id) virtual, key id2 (id2));
create table t2 (id int key, constraint fk_id foreign key (id) references t1 (id) on delete cascade);
insert into t1 (id) values (1), (2);
insert into t2 (id) values (1), (2);
delete from t1;
select * from t1;
select * from t2;
drop table t2;
drop table t1;

--echo #
--echo # End of 10.2 tests
--echo #

--echo #
--echo # MDEV-18114 Foreign Key Constraint actions don't affect Virtual Column
--echo #
create table t1 (id int primary key);

# note that RESTRICT, NO ACTION, and DELETE CASCADE are fine
# because they don't change values of referenced columns

# virtual indexed
create or replace table t2 (id int, id2 int as (id) virtual, key(id2), foreign key (id) references t1 (id) on update restrict);
create or replace table t2 (id int, id2 int as (id) virtual, key(id2), foreign key (id) references t1 (id) on update no action);
create or replace table t2 (id int, id2 int as (id) virtual, key(id2), foreign key (id) references t1 (id) on delete cascade);
create or replace table t2 (id int, id2 int as (id) virtual, key(id2), foreign key (id) references t1 (id) on update cascade);
create or replace table t2 (id int, id2 int as (id) virtual, key(id2), foreign key (id) references t1 (id) on delete set null);
create or replace table t2 (id int, id2 int as (id) virtual, key(id2), foreign key (id) references t1 (id) on update set null);

# stored
create or replace table t2 (id int, id2 int as (id) stored, foreign key (id) references t1 (id) on update restrict);
create or replace table t2 (id int, id2 int as (id) stored, foreign key (id) references t1 (id) on update no action);
create or replace table t2 (id int, id2 int as (id) stored, foreign key (id) references t1 (id) on delete cascade);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int as (id) stored, foreign key (id) references t1 (id) on update cascade);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int as (id) stored, foreign key (id) references t1 (id) on delete set null);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int as (id) stored, foreign key (id) references t1 (id) on update set null);

# stored indirect
create or replace table t2 (id int, id2 int as (id) virtual, id3 int as (id2) stored, foreign key (id) references t1 (id) on update restrict);
create or replace table t2 (id int, id2 int as (id) virtual, id3 int as (id2) stored, foreign key (id) references t1 (id) on update no action);
create or replace table t2 (id int, id2 int as (id) virtual, id3 int as (id2) stored, foreign key (id) references t1 (id) on delete cascade);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int as (id) virtual, id3 int as (id2) stored, foreign key (id) references t1 (id) on update cascade);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int as (id) virtual, id3 int as (id2) stored, foreign key (id) references t1 (id) on delete set null);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int as (id) virtual, id3 int as (id2) stored, foreign key (id) references t1 (id) on update set null);

# default
create or replace table t2 (id int, id2 int default (id), foreign key (id) references t1 (id) on update restrict);
create or replace table t2 (id int, id2 int default (id), foreign key (id) references t1 (id) on update no action);
create or replace table t2 (id int, id2 int default (id), foreign key (id) references t1 (id) on delete cascade);
create or replace table t2 (id int, id2 int default (id), foreign key (id) references t1 (id) on update cascade);
create or replace table t2 (id int, id2 int default (id), foreign key (id) references t1 (id) on delete set null);
create or replace table t2 (id int, id2 int default (id), foreign key (id) references t1 (id) on update set null);

# field check
create or replace table t2 (id int, id2 int check (id), foreign key (id) references t1 (id) on update restrict);
create or replace table t2 (id int, id2 int check (id), foreign key (id) references t1 (id) on update no action);
create or replace table t2 (id int, id2 int check (id), foreign key (id) references t1 (id) on delete cascade);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int check (id), foreign key (id) references t1 (id) on update cascade);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int check (id), foreign key (id) references t1 (id) on delete set null);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int check (id), foreign key (id) references t1 (id) on update set null);

# table check
create or replace table t2 (id int, id2 int, check (id), foreign key (id) references t1 (id) on update restrict);
create or replace table t2 (id int, id2 int, check (id), foreign key (id) references t1 (id) on update no action);
create or replace table t2 (id int, id2 int, check (id), foreign key (id) references t1 (id) on delete cascade);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int, check (id), foreign key (id) references t1 (id) on update cascade);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int, check (id), foreign key (id) references t1 (id) on delete set null);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int, check (id), foreign key (id) references t1 (id) on update set null);

# table check indirect
create or replace table t2 (id int, id2 int as (id) virtual, check (id2), foreign key (id) references t1 (id) on update restrict);
create or replace table t2 (id int, id2 int as (id) virtual, check (id2), foreign key (id) references t1 (id) on update no action);
create or replace table t2 (id int, id2 int as (id) virtual, check (id2), foreign key (id) references t1 (id) on delete cascade);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int as (id) virtual, check (id2), foreign key (id) references t1 (id) on update cascade);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int as (id) virtual, check (id2), foreign key (id) references t1 (id) on delete set null);
--error ER_GENERATED_COLUMN_FUNCTION_IS_NOT_ALLOWED
create or replace table t2 (id int, id2 int as (id) virtual, check (id2), foreign key (id) references t1 (id) on update set null);

drop table if exists t2, t1;

--echo #
--echo # MDEV-31853 Assertion failure in Column_definition::check_vcol_for_key upon adding FK
--echo #
create table t (a int, b int, c int generated always as (a), key(b), key(c));
--error ER_ALTER_OPERATION_NOT_SUPPORTED_REASON
alter table t add foreign key (a) references t (b) on update set null, algorithm=nocopy;
alter table t add foreign key (a) references t (b);
show create table t;
drop table t;

--echo #
--echo # End of 10.5 tests
--echo #

--echo #
--echo # MDEV-29181 Potential corruption on FK update on a table with vcol index
--echo #

--connect (con2, localhost, root,,)
--connection default
create table t1 (a int primary key);
insert into t1(a) select * from seq_1_to_2048;
create table t2 (a int,  b int as (a), key(b), foreign key (a) references t1 (a)
  on update cascade);
insert into t2(a) select * from seq_1_to_2048;

send update t1 set a = a - 100000 where a < 1024;

--connection con2
set lock_wait_timeout =1;
update t1 set a= a + 1000000 where a > 1024;

--connection default
--reap

-- echo # LOAD DATA + VIEW
create view v1 as select a as va from t1;
select * into outfile 't1_out' from t1 where a = 1000000 + 2000;
--error ER_ROW_IS_REFERENCED_2
load data infile 't1_out' replace into table v1;

# Cleanup
drop view v1;
drop table t2, t1;
--disconnect con2

--echo # DROP FOREIGN KEY while concurrent prelocking is not finished
create table t1 (pk int primary key, a int, key(a)) engine=innodb;
create table t2 (pk int, b int references t1(a)
                   on delete cascade on update cascade) engine=innodb;

create table t3 (c int, foreign key(c) references t1(a)) engine=innodb;

insert into t1 values (1, 1), (2, 1), (3, 1);
insert into t2 values (1, 1);

--connect (con1,localhost,root,,test)
send update t1 set a = 6;

--connection default
alter table t2 add key(pk), drop foreign key t2_ibfk_1,
               algorithm=inplace, lock=none;

--connection con1
--reap
--connection default

#cleanup
drop table t2, t3, t1;

-- echo # UPDATE is started, but FK is ADDed concurrently
create table t1 (pk int primary key, a int, key(a)) engine=innodb;
create table t2 (b int) engine=innodb;

insert into t1 select *, 1 from seq_1_to_300;
insert into t2 values (1);

--connection con1
send update t1 set a = 6;

--connection default
set foreign_key_checks=off;
alter table t2 add foreign key(b) references t1(a)
               on delete cascade on update cascade,
               algorithm=inplace, lock=none;

--connection con1
--reap
--connection default

# Cleanup
--disconnect con1
drop table t2, t1;

--echo #
--echo # End of 10.2 tests
--echo #
